// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.PrinterCommClass = (function() {
    function PrinterCommClass(url, websocket_url, fabrica_id, octoprint_key) {
      this.execRefresh = __bind(this.execRefresh, this);
      this.sendFile = __bind(this.sendFile, this);
      this.userCommand = __bind(this.userCommand, this);
      this.sendCommandResponse = __bind(this.sendCommandResponse, this);
      this.sendStatusUpdate = __bind(this.sendStatusUpdate, this);
      this.statusUpdate = __bind(this.statusUpdate, this);
      this.sendOauthRequest = __bind(this.sendOauthRequest, this);
      this.execAjax = __bind(this.execAjax, this);
      this.bindEvents = __bind(this.bindEvents, this);
      this.initBind = __bind(this.initBind, this);
      this.session_key = octoprint_key;
      this.dispatcher = new WebSocketRails(url, websocket_url);
      this.auth_channel = this.dispatcher.subscribe("request_token_" + fabrica_id);
      this.auth_channel.bind('oauth_callback', this.initBind);
      this.sendOauthRequest(fabrica_id);
    }

    PrinterCommClass.prototype.initBind = function(key) {
      this.auth_key = key;
      this.channel = this.dispatcher.subscribe("printer_session_" + this.auth_key);
      return this.bindEvents();
    };

    PrinterCommClass.prototype.bindEvents = function() {
      this.channel.bind('user_command', this.userCommand);
      this.channel.bind('user_file', this.sendFile);
      return this.channel.bind('machine_refresh', this.execRefresh);
    };

    PrinterCommClass.prototype.execAjax = function(url, type, data, content_type) {
      if (data == null) {
        data = null;
      }
      if (content_type == null) {
        content_type = "application/json";
      }
      return $.ajax({
        url: url,
        type: type,
        dataType: "JSON",
        contentType: content_type,
        headers: {
          "X-ApiKey": this.session_key
        },
        data: data
      });
    };

    PrinterCommClass.prototype.sendOauthRequest = function(fabrica_id) {
      this.dispatcher.trigger("box.oauth_request", {
        session_id: fabrica_id
      });
      return console.log("send oauth done!");
    };

    PrinterCommClass.prototype.statusUpdate = function(message) {
      var res_code, self;
      res_code = void 0;
      self = this;
      return $.when(this.execAjax("/api/connection", "GET"), this.execAjax("/api/job", "GET"), this.execAjax("/api/files", "GET")).then(function(connection, job, files) {
        res_code = {
          "connection": connection[0],
          "job": job[0],
          "files": files[0]
        };
        self.sendStatusUpdate(res_code);
      }, function(connection, job, files) {
        res_code = {
          "connection": connection[0],
          "job": job[0],
          "files": files[0]
        };
        self.sendStatusUpdate(res_code);
        console.log("statusUpdate failed!");
        console.log(res_code);
      });
    };

    PrinterCommClass.prototype.sendStatusUpdate = function(response) {
      return this.dispatcher.trigger("box.status_update", {
        token: this.auth_key,
        status: response
      });
    };

    PrinterCommClass.prototype.sendCommandResponse = function(response) {
      return this.dispatcher.trigger("box.command_response", {
        token: this.auth_key,
        callback: response
      });
    };

    PrinterCommClass.prototype.userCommand = function(message) {
      var res_code, self;
      res_code = void 0;
      self = this;
      return $.when(this.execAjax(message["url"], message["type"], message["params"])).then(function(response) {
        res_code = response;
        self.sendCommandResponse(res_code);
      }, function(response) {
        res_code = response;
        self.sendCommandResponse(res_code);
      });
    };

    PrinterCommClass.prototype.sendFile = function(message) {
      var res_code, self;
      console.log(message);
      res_code = void 0;
      self = this;
      return $.when(this.execAjax("/api/files/local", "POST", message["content"], message["content_type"])).then(function(response) {
        res_code = response;
        self.sendCommandResponse(res_code);
      }, function(response) {
        res_code = response;
        self.sendCommandResponse(res_code);
      });
    };

    PrinterCommClass.prototype.execRefresh = function() {
      return location.reload();
    };

    return PrinterCommClass;

  })();

}).call(this);
